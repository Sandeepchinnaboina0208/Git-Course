Git Version Control:-
Git:
-> Git is a Distributed Version Control System.

Version Control:
-> Power of going back to the previous version is called Version Control.

1) Local Version Control:-
-> Storing in the own machine.

2) Centralized Version Control
-> If many people work on the same project, they will have a centralized repository, and everyone can access it.
-> They can commit and update the changes of the files.

3) Distributed Version Control System
-> Having an entire commit history and collaborate with other developers.

Configuration of git (already having git connection)

For connection of the git
      --> git config --global --list

For new Connection to git..
      --> git config --global user.name "sandeep"
      --> git config --global user.email "Your email"

Create a Local repository :-
git init

→To check status of the repository
      --> git status
↳ By default master branch will be created

To change the branch from master to main.
      --> git init -b main

Add any text or code then the file created in the working directory and it does not save in the Local repository

Local repos (c:\git)
Working Directory
Files
Staging Area

To add the file in the local repository

   --> git add file name

To know the all initial Commits in the repository
then use
    --> git log

To commit the files Use

    --> git commit -m "message"

Shipping the Staging area

If any Commit happen first we have to staged the file means
    --> git add "filename"

→For skipping the Staging we can directly Commit it:
    --> git commit -a -m "first commit"

->To know the changes happen in the file Use
    --> git diff

When the Code is in Staged then know the Changes
    --> git diff --staged

Remove any file from the git:
    --> git rm --cached filename

To clone any repository:
    --> git clone <link>

To push all your code in the github you should follow some steps :

Step 1 :- Create a public or private Repository in your github account
Step 2 :- Create a new branch in your local repository
        --> git init -b main
Step 3 :- Add all the files in the staging area
        --> git add .
Step 4 :- Commit the files with a meaningful message
        --> git commit -m "message"
Step 5:- To connect your local Repository to the git repository
        --> git remote add origin <link>
Step 6 :- Push the code to the github repository
        --> git push -u origin main

Tagging:
A version of your project is a tag. Let's say if you are working on a project and then you have done several commits and you release a new version, and you can give a tag to the version.

To know the how many tags in the project then use
        --> git tag 

There are two types of tagging:
        --> Annotated tagging
        --> Light weight tagging

To Create a tag:
        --> git tag -a 'version number' -m "first release"

To know the description of the tag :-
        --> git show v1.0

To push the tags use
        --> git Push origin 'version name'

Git Branch :-
=> A branch in Git is simply a lightweight movable pointer to one of these commits. 
=> The default branch name in Git is master . As you start making commits, you're given a master branch that points to the last commit you made. 
=> Every time you commit, the master branch pointer moves forward automatically.

To Create a branch:
        --> git checkout -b 'branch name'

To know how many branches in the project
        -->git branch 

Switch between branches:
       --> git switch 'branch name'

How the developers Or collaborators works on same project ?

Step 1:- First sign in into your git repository.
Step 2:- Get the authors Repository
Step 3:- Fork the Repository.
Step 4:- Work on the project and make a pull resquest.
Step 5:- The pull request is reviewed by the maintainer.
Step 6:- The maintainer merges the pull request.
Step 7:- The pull request is closed.


How to collaborate with other Repositories ?

Step 1:- First open the Github Repository
Step 2:- Go to the Repository Settings
Step 3:- Click on the "Collaborators" tab
Step 4:- Add the collaborator's email address
Step 5:- Click on the "Add collaborator" button
Step 6:- The collaborator will receive an email with instructions on how to accept the invitation.
